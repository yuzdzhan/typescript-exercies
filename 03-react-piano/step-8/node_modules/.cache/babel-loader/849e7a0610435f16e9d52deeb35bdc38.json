{"ast":null,"code":"var _jsxFileName = \"/Users/superhosting/Personal/Projects/book-fullstack-react-with-typescript/exercise-files/03-react-piano/step-8/src/adapters/Soundfont/withInstrument.tsx\";\nimport React, { Component } from \"react\";\nimport Soundfont from \"soundfont-player\";\nimport { DEFAULT_INSTRUMENT } from \"../../domain/sound\";\nexport function withInstrument(WrappedComponent) {\n  var _class, _temp;\n\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  return _temp = _class = class WithInstrument extends Component {\n    constructor(props) {\n      super(props);\n      this.audio = void 0;\n      this.player = null;\n      this.activeNodes = {};\n      this.state = {\n        loading: false,\n        current: null\n      };\n\n      this.resume = async () => {\n        return this.audio.state === \"suspended\" ? await this.audio.resume() : Promise.resolve();\n      };\n\n      this.load = async instrument => {\n        this.setState({\n          loading: true\n        });\n        this.player = await Soundfont.instrument(this.audio, instrument);\n        this.setState({\n          loading: false,\n          current: instrument\n        });\n      };\n\n      this.play = async note => {\n        await this.resume();\n        if (!this.player) return;\n        const node = this.player.play(note.toString());\n        this.activeNodes = { ...this.activeNodes,\n          [note]: node\n        };\n      };\n\n      this.stop = async note => {\n        await this.resume();\n        if (!this.activeNodes[note]) return;\n        this.activeNodes[note].stop();\n        this.activeNodes = { ...this.activeNodes,\n          [note]: null\n        };\n      };\n\n      const {\n        AudioContext\n      } = this.props;\n      this.audio = new AudioContext();\n    }\n\n    componentDidMount() {\n      const {\n        instrument\n      } = this.props;\n      this.load(instrument);\n    }\n\n    shouldComponentUpdate({\n      instrument\n    }) {\n      return this.state.current !== instrument;\n    }\n\n    componentDidUpdate({\n      instrument: prevInstrument\n    }) {\n      const {\n        instrument\n      } = this.props;\n      if (instrument && instrument !== prevInstrument) this.load(instrument);\n    }\n\n    render() {\n      const injected = {\n        loading: this.state.loading,\n        play: this.play,\n        stop: this.stop\n      };\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, this.props, injected, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }));\n    }\n\n  }, _class.defaultProps = {\n    instrument: DEFAULT_INSTRUMENT\n  }, _class.displayName = `withInstrument(${displayName})`, _temp;\n}","map":{"version":3,"sources":["/Users/superhosting/Personal/Projects/book-fullstack-react-with-typescript/exercise-files/03-react-piano/step-8/src/adapters/Soundfont/withInstrument.tsx"],"names":["React","Component","Soundfont","DEFAULT_INSTRUMENT","withInstrument","WrappedComponent","displayName","name","WithInstrument","constructor","props","audio","player","activeNodes","state","loading","current","resume","Promise","resolve","load","instrument","setState","play","note","node","toString","stop","AudioContext","componentDidMount","shouldComponentUpdate","componentDidUpdate","prevInstrument","render","injected","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, ComponentType } from \"react\"\nimport Soundfont, { InstrumentName, Player } from \"soundfont-player\"\nimport { MidiValue } from \"../../domain/note\"\nimport { Optional } from \"../../domain/types\"\nimport {\n  AudioNodesRegistry,\n  DEFAULT_INSTRUMENT\n} from \"../../domain/sound\"\n\ninterface InjectedProps {\n  loading: boolean\n  play(note: MidiValue): Promise<void>\n  stop(note: MidiValue): Promise<void>\n}\n\ninterface ProviderProps {\n  AudioContext: AudioContextType\n  instrument: InstrumentName\n}\n\ninterface ProviderState {\n  loading: boolean\n  current: Optional<InstrumentName>\n}\n\nexport function withInstrument<\n  TProps extends InjectedProps = InjectedProps\n>(WrappedComponent: ComponentType<TProps>) {\n  const displayName =\n    WrappedComponent.displayName ||\n    WrappedComponent.name ||\n    \"Component\"\n\n  return class WithInstrument extends Component<\n    ProviderProps,\n    ProviderState\n  > {\n    public static defaultProps = {\n      instrument: DEFAULT_INSTRUMENT\n    }\n\n    private audio: AudioContext\n    private player: Optional<Player> = null\n    private activeNodes: AudioNodesRegistry = {}\n\n    public static displayName = `withInstrument(${displayName})`\n    public state: ProviderState = {\n      loading: false,\n      current: null\n    }\n\n    private resume = async () => {\n      return this.audio.state === \"suspended\"\n        ? await this.audio.resume()\n        : Promise.resolve()\n    }\n\n    constructor(props: ProviderProps) {\n      super(props)\n\n      const { AudioContext } = this.props\n      this.audio = new AudioContext()\n    }\n\n    public componentDidMount() {\n      const { instrument } = this.props\n      this.load(instrument)\n    }\n\n    public shouldComponentUpdate({ instrument }: ProviderProps) {\n      return this.state.current !== instrument\n    }\n\n    public componentDidUpdate({\n      instrument: prevInstrument\n    }: ProviderProps) {\n      const { instrument } = this.props\n      if (instrument && instrument !== prevInstrument)\n        this.load(instrument)\n    }\n\n    public load = async (instrument: InstrumentName) => {\n      this.setState({ loading: true })\n\n      this.player = await Soundfont.instrument(this.audio, instrument)\n      this.setState({ loading: false, current: instrument })\n    }\n\n    public play = async (note: MidiValue) => {\n      await this.resume()\n      if (!this.player) return\n\n      const node = this.player.play(note.toString())\n      this.activeNodes = { ...this.activeNodes, [note]: node }\n    }\n\n    public stop = async (note: MidiValue) => {\n      await this.resume()\n      if (!this.activeNodes[note]) return\n\n      this.activeNodes[note]!.stop()\n      this.activeNodes = { ...this.activeNodes, [note]: null }\n    }\n\n    public render() {\n      const injected = {\n        loading: this.state.loading,\n        play: this.play,\n        stop: this.stop\n      } as InjectedProps\n\n      return (\n        <WrappedComponent {...this.props} {...(injected as TProps)} />\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}