{"ast":null,"code":"const C1_MIDI_NUMBER = 24;\nconst C4_MIDI_NUMBER = 60;\nconst B5_MIDI_NUMBER = 83;\nexport const LOWER_NOTE = C4_MIDI_NUMBER;\nexport const HIGHER_NOTE = B5_MIDI_NUMBER;\nexport const SEMITONES_IN_OCTAVE = 12;\nexport const NATURAL_PITCH_INDICES = [0, 2, 4, 5, 7, 9, 11];\nexport const PITCHES_REGISTRY = {\n  0: \"C\",\n  1: \"C\",\n  2: \"D\",\n  3: \"D\",\n  4: \"E\",\n  5: \"F\",\n  6: \"F\",\n  7: \"G\",\n  8: \"G\",\n  9: \"A\",\n  10: \"A\",\n  11: \"B\"\n};\nexport function fromMidi(midi) {\n  const pianoRange = midi - C1_MIDI_NUMBER;\n  const octave = Math.floor(pianoRange / SEMITONES_IN_OCTAVE) + 1;\n  const index = pianoRange % SEMITONES_IN_OCTAVE;\n  const pitch = PITCHES_REGISTRY[index];\n  const isSharp = !NATURAL_PITCH_INDICES.includes(index);\n  const type = isSharp ? \"sharp\" : \"natural\";\n  return {\n    octave,\n    pitch,\n    index,\n    type,\n    midi\n  };\n}\nexport function generateNotes({\n  fromNote = LOWER_NOTE,\n  toNote = HIGHER_NOTE\n} = {}) {\n  return Array(toNote - fromNote + 1).fill(0).map((_, index) => fromMidi(fromNote + index));\n}\nexport const notes = generateNotes();","map":{"version":3,"sources":["/Users/superhosting/Personal/Projects/book-fullstack-react-with-typescript/exercise-files/03-react-piano/step-8/src/domain/note.ts"],"names":["C1_MIDI_NUMBER","C4_MIDI_NUMBER","B5_MIDI_NUMBER","LOWER_NOTE","HIGHER_NOTE","SEMITONES_IN_OCTAVE","NATURAL_PITCH_INDICES","PITCHES_REGISTRY","fromMidi","midi","pianoRange","octave","Math","floor","index","pitch","isSharp","includes","type","generateNotes","fromNote","toNote","Array","fill","map","_","notes"],"mappings":"AAAA,MAAMA,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AAEA,OAAO,MAAMC,UAAU,GAAGF,cAAnB;AACP,OAAO,MAAMG,WAAW,GAAGF,cAApB;AACP,OAAO,MAAMG,mBAAmB,GAAG,EAA5B;AAkBP,OAAO,MAAMC,qBAAmC,GAAG,CACjD,CADiD,EAEjD,CAFiD,EAGjD,CAHiD,EAIjD,CAJiD,EAKjD,CALiD,EAMjD,CANiD,EAOjD,EAPiD,CAA5C;AAUP,OAAO,MAAMC,gBAA+C,GAAG;AAC7D,KAAG,GAD0D;AAE7D,KAAG,GAF0D;AAG7D,KAAG,GAH0D;AAI7D,KAAG,GAJ0D;AAK7D,KAAG,GAL0D;AAM7D,KAAG,GAN0D;AAO7D,KAAG,GAP0D;AAQ7D,KAAG,GAR0D;AAS7D,KAAG,GAT0D;AAU7D,KAAG,GAV0D;AAW7D,MAAI,GAXyD;AAY7D,MAAI;AAZyD,CAAxD;AAeP,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAyC;AAC9C,QAAMC,UAAU,GAAGD,IAAI,GAAGT,cAA1B;AACA,QAAMW,MAAM,GAAIC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAGL,mBAAxB,IACd,CADF;AAGA,QAAMS,KAAK,GAAGJ,UAAU,GAAGL,mBAA3B;AACA,QAAMU,KAAK,GAAGR,gBAAgB,CAACO,KAAD,CAA9B;AAEA,QAAME,OAAO,GAAG,CAACV,qBAAqB,CAACW,QAAtB,CAA+BH,KAA/B,CAAjB;AACA,QAAMI,IAAI,GAAGF,OAAO,GAAG,OAAH,GAAa,SAAjC;AAEA,SAAO;AAAEL,IAAAA,MAAF;AAAUI,IAAAA,KAAV;AAAiBD,IAAAA,KAAjB;AAAwBI,IAAAA,IAAxB;AAA8BT,IAAAA;AAA9B,GAAP;AACD;AAOD,OAAO,SAASU,aAAT,CAAuB;AAC5BC,EAAAA,QAAQ,GAAGjB,UADiB;AAE5BkB,EAAAA,MAAM,GAAGjB;AAFmB,IAGF,EAHrB,EAGiC;AACtC,SAAOkB,KAAK,CAACD,MAAM,GAAGD,QAAT,GAAoB,CAArB,CAAL,CACJG,IADI,CACC,CADD,EAEJC,GAFI,CAEA,CAACC,CAAD,EAAIX,KAAJ,KAAsBN,QAAQ,CAACY,QAAQ,GAAGN,KAAZ,CAF9B,CAAP;AAGD;AAED,OAAO,MAAMY,KAAK,GAAGP,aAAa,EAA3B","sourcesContent":["const C1_MIDI_NUMBER = 24\nconst C4_MIDI_NUMBER = 60\nconst B5_MIDI_NUMBER = 83\n\nexport const LOWER_NOTE = C4_MIDI_NUMBER\nexport const HIGHER_NOTE = B5_MIDI_NUMBER\nexport const SEMITONES_IN_OCTAVE = 12\n\nexport type NoteType = \"natural\" | \"flat\" | \"sharp\"\nexport type NotePitch = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\"\nexport type OctaveIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\n\nexport type MidiValue = number\nexport type PitchIndex = number\n\nexport interface Note {\n  midi: MidiValue\n  type: NoteType\n\n  pitch: NotePitch\n  index: PitchIndex\n  octave: OctaveIndex\n}\n\nexport const NATURAL_PITCH_INDICES: PitchIndex[] = [\n  0,\n  2,\n  4,\n  5,\n  7,\n  9,\n  11\n]\n\nexport const PITCHES_REGISTRY: Record<PitchIndex, NotePitch> = {\n  0: \"C\",\n  1: \"C\",\n  2: \"D\",\n  3: \"D\",\n  4: \"E\",\n  5: \"F\",\n  6: \"F\",\n  7: \"G\",\n  8: \"G\",\n  9: \"A\",\n  10: \"A\",\n  11: \"B\"\n}\n\nexport function fromMidi(midi: MidiValue): Note {\n  const pianoRange = midi - C1_MIDI_NUMBER\n  const octave = (Math.floor(pianoRange / SEMITONES_IN_OCTAVE) +\n    1) as OctaveIndex\n\n  const index = pianoRange % SEMITONES_IN_OCTAVE\n  const pitch = PITCHES_REGISTRY[index]\n\n  const isSharp = !NATURAL_PITCH_INDICES.includes(index)\n  const type = isSharp ? \"sharp\" : \"natural\"\n\n  return { octave, pitch, index, type, midi }\n}\n\ninterface NotesGeneratorSettings {\n  fromNote?: MidiValue\n  toNote?: MidiValue\n}\n\nexport function generateNotes({\n  fromNote = LOWER_NOTE,\n  toNote = HIGHER_NOTE\n}: NotesGeneratorSettings = {}): Note[] {\n  return Array(toNote - fromNote + 1)\n    .fill(0)\n    .map((_, index: number) => fromMidi(fromNote + index))\n}\n\nexport const notes = generateNotes()\n"]},"metadata":{},"sourceType":"module"}