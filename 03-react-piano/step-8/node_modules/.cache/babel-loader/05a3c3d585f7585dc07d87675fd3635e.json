{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nfunction fromEventCode(code) {\n  const prefixRegex = /Key|Digit/gi;\n  return code.replace(prefixRegex, \"\");\n}\n\nfunction equal(watchedKey, eventCode) {\n  return fromEventCode(eventCode).toUpperCase() === watchedKey.toUpperCase();\n}\n\nexport function usePressObserver({\n  watchKey,\n  onStartPress,\n  onFinishPress\n}) {\n  const [pressed, setPressed] = useState(false);\n  useEffect(() => {\n    function handlePressStart({\n      code\n    }) {\n      if (pressed || !equal(watchKey, code)) return;\n      setPressed(true);\n      onStartPress();\n    }\n\n    function handlePressFinish({\n      code\n    }) {\n      if (!pressed || !equal(watchKey, code)) return;\n      setPressed(false);\n      onFinishPress();\n    }\n\n    document.addEventListener(\"keydown\", handlePressStart);\n    document.addEventListener(\"keyup\", handlePressFinish);\n    return () => {\n      document.removeEventListener(\"keydown\", handlePressStart);\n      document.removeEventListener(\"keyup\", handlePressFinish);\n    };\n  }, [watchKey, pressed, setPressed, onStartPress, onFinishPress]);\n  return pressed;\n}","map":{"version":3,"sources":["/Users/superhosting/Personal/Projects/book-fullstack-react-with-typescript/exercise-files/03-react-piano/step-8/src/components/PressObserver/usePressObserver.ts"],"names":["useEffect","useState","fromEventCode","code","prefixRegex","replace","equal","watchedKey","eventCode","toUpperCase","usePressObserver","watchKey","onStartPress","onFinishPress","pressed","setPressed","handlePressStart","handlePressFinish","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAYA,SAASC,aAAT,CAAuBC,IAAvB,EAAkD;AAChD,QAAMC,WAAW,GAAG,aAApB;AACA,SAAOD,IAAI,CAACE,OAAL,CAAaD,WAAb,EAA0B,EAA1B,CAAP;AACD;;AAED,SAASE,KAAT,CAAeC,UAAf,EAAqCC,SAArC,EAAoE;AAClE,SACEN,aAAa,CAACM,SAAD,CAAb,CAAyBC,WAAzB,OACAF,UAAU,CAACE,WAAX,EAFF;AAID;;AAED,OAAO,SAASC,gBAAT,CAA0B;AAC/BC,EAAAA,QAD+B;AAE/BC,EAAAA,YAF+B;AAG/BC,EAAAA;AAH+B,CAA1B,EAIiB;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAY,KAAZ,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASgB,gBAAT,CAA0B;AAAEb,MAAAA;AAAF,KAA1B,EAAyD;AACvD,UAAIW,OAAO,IAAI,CAACR,KAAK,CAACK,QAAD,EAAWR,IAAX,CAArB,EAAuC;AACvCY,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAH,MAAAA,YAAY;AACb;;AAED,aAASK,iBAAT,CAA2B;AAAEd,MAAAA;AAAF,KAA3B,EAA0D;AACxD,UAAI,CAACW,OAAD,IAAY,CAACR,KAAK,CAACK,QAAD,EAAWR,IAAX,CAAtB,EAAwC;AACxCY,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,aAAa;AACd;;AAEDK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,gBAArC;AACAE,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCF,iBAAnC;AAEA,WAAO,MAAM;AACXC,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCJ,gBAAxC;AACAE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCH,iBAAtC;AACD,KAHD;AAID,GApBQ,EAoBN,CAACN,QAAD,EAAWG,OAAX,EAAoBC,UAApB,EAAgCH,YAAhC,EAA8CC,aAA9C,CApBM,CAAT;AAsBA,SAAOC,OAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { Key as KeyLabel } from \"../../domain/keyboard\"\n\ntype IsPressed = boolean\ntype EventCode = string\n\ninterface Settings {\n  watchKey: KeyLabel\n  onStartPress: Function\n  onFinishPress: Function\n}\n\nfunction fromEventCode(code: EventCode): KeyLabel {\n  const prefixRegex = /Key|Digit/gi\n  return code.replace(prefixRegex, \"\")\n}\n\nfunction equal(watchedKey: KeyLabel, eventCode: EventCode): boolean {\n  return (\n    fromEventCode(eventCode).toUpperCase() ===\n    watchedKey.toUpperCase()\n  )\n}\n\nexport function usePressObserver({\n  watchKey,\n  onStartPress,\n  onFinishPress\n}: Settings): IsPressed {\n  const [pressed, setPressed] = useState<IsPressed>(false)\n\n  useEffect(() => {\n    function handlePressStart({ code }: KeyboardEvent): void {\n      if (pressed || !equal(watchKey, code)) return\n      setPressed(true)\n      onStartPress()\n    }\n\n    function handlePressFinish({ code }: KeyboardEvent): void {\n      if (!pressed || !equal(watchKey, code)) return\n      setPressed(false)\n      onFinishPress()\n    }\n\n    document.addEventListener(\"keydown\", handlePressStart)\n    document.addEventListener(\"keyup\", handlePressFinish)\n\n    return () => {\n      document.removeEventListener(\"keydown\", handlePressStart)\n      document.removeEventListener(\"keyup\", handlePressFinish)\n    }\n  }, [watchKey, pressed, setPressed, onStartPress, onFinishPress])\n\n  return pressed\n}\n"]},"metadata":{},"sourceType":"module"}